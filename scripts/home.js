// Generated by CoffeeScript 1.6.3
(function() {
  var dragNop, handleDragDrop, handleFiles, handleWorkerMessage, hashCompleted, templates, worker;

  worker = new Worker('/static/worker.js');

  templates = {};

  window.templates = templates;

  window.addEventListener('load', function() {
    var compile;
    window.addEventListener('dragenter', dragNop, false);
    window.addEventListener('dragleave', dragNop, false);
    window.addEventListener('dragover', dragNop, false);
    window.addEventListener('drop', handleDragDrop, false);
    document.getElementById('browse-link').addEventListener('click', function(e) {
      e.preventDefault();
      return document.getElementById('browse').click();
    }, false);
    document.getElementById('browse').addEventListener('change', function(e) {
      return handleFiles(e.target.files);
    }, false);
    worker.addEventListener('message', handleWorkerMessage);
    worker.postMessage({
      action: 'load'
    });
    compile = function(name) {
      return Handlebars.compile(document.getElementById(name + '-template').innerHTML);
    };
    return templates.preview = compile('preview');
  }, false);

  window.onbeforeunload = function() {
    if (false) {
      return 'If you leave this page, your uploads will be cancelled.';
    }
  };

  handleWorkerMessage = function(e) {
    if (e.execute != null) {
      return eval(e.execute);
    }
  };

  dragNop = function(e) {
    e.stopPropagation();
    return e.preventDefault();
  };

  handleDragDrop = function(e) {
    var droparea, files;
    dragNop(e);
    droparea = document.getElementById('droparea');
    if (droparea.classList.contains('hover')) {
      droparea.classList.remove('hover');
    }
    files = e.dataTransfer.files;
    if (files.length > 0) {
      return handleFiles(files);
    }
  };

  handleFiles = function(files) {
    var dropArea, file, fileList, mediaFile, reader, _i, _len, _results;
    dropArea = document.getElementById('droparea');
    dropArea.style.overflowY = 'scroll';
    dropArea.classList.add('files');
    fileList = document.getElementById('files');
    if (uploadedFiles.length === 0) {
      document.getElementById('files').innerHTML = '';
    }
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      mediaFile = new MediaFile(file);
      mediaFile.preview = templates.preview(mediaFile).toDOM();
      fileList.appendChild(mediaFile.preview);
      mediaFile.preview = fileList.lastElementChild;
      mediaFile.updateStatus('uploading');
      mediaFile.loadPreview(file);
      mediaFile.hash = new String(guid());
      uploadedFiles[mediaFile.hash](mediaFile);
      reader = new FileReader();
      _results.push(reader.onloadend = function(e) {
        var data;
        data = e.target.result;
        return worker.postmessage({
          action: 'compute-hash',
          data: data,
          callback: 'hashCompleted',
          id: mediaFile.hash
        });
      });
    }
    return _results;
  };

  hashCompleted = function(id, result) {
    return console.log(id + ': ' + result);
  };

}).call(this);
